import { S3ControlClient, GetStorageLensConfigurationCommand } from "@aws-sdk/client-s3-control";

const client = new S3ControlClient({ region: "us-east-1" });

async function getStorageLensData(accountId, storageLensId) {
    const params = { AccountId: accountId, StorageLensConfigurationId: storageLensId };
    const data = await client.send(new GetStorageLensConfigurationCommand(params));
    console.log("Storage Lens Data:", data);
}

getStorageLensData("123456789012", "your-storage-lens-id");






import { S3ControlClient, ListStorageLensConfigurationsCommand } from "@aws-sdk/client-s3-control";

const client = new S3ControlClient({ region: "us-east-1" });

async function getStorageLensID(accountId) {
    const params = { AccountId: accountId };
    const data = await client.send(new ListStorageLensConfigurationsCommand(params));

    if (data.StorageLensConfigurationList && data.StorageLensConfigurationList.length > 0) {
        console.log("Storage Lens ID:", data.StorageLensConfigurationList[0].Id);
    } else {
        console.log("No Storage Lens configurations found.");
    }
}

getStorageLensID("123456789012");











async function getBucketSize(bucketName) {
    const params = {
        MetricDataQueries: [
            {
                Id: "bucketSize",
                MetricStat: {
                    Metric: {
                        Namespace: "AWS/S3",
                        MetricName: "BucketSizeBytes",
                        Dimensions: [
                            { Name: "BucketName", Value: bucketName },
                            { Name: "StorageType", Value: "StandardStorage" }
                        ]
                    },
                    Period: 86400, // Data updates once per day
                    Stat: "Average"
                }
            }
        ],
        StartTime: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // Get past 7 days (optional)
        EndTime: new Date()
    };

    try {
        const data = await cloudWatchClient.send(new GetMetricDataCommand(params));
        console.log(`Bucket: ${bucketName}, Size (Bytes):`, data.MetricDataResults[0]?.Values[0] || "No Data Available");
    } catch (error) {
        console.error("Error fetching bucket size:", error);
    }
}




cloudwatch:ListMetrics
